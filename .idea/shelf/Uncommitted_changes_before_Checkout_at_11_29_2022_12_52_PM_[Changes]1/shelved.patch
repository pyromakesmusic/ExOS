Index: pyonics/PID_v1.py
===================================================================
diff --git a/pyonics/PID_v1.py b/pyonics/PID_v1.py
deleted file mode 100644
--- a/pyonics/PID_v1.py	
+++ /dev/null	
@@ -1,267 +0,0 @@
-# -*- coding: utf-8 -*-
-"""
-Created on Wed Sep 28 19:26:42 2022
-Priority Code Cell
-@author: Ghost
-===============
-Questions, Thoughts, Notes, etc.
---------------------------------
-DATE: Sept 30
-
-To address the question more generally, I probably need to model the kinematics
-first, then get the error term from that. The kinematic equations may have libraries for solving them.
-
-1735h
-I'm going to do it. Build the kinematics library first, build in sliders (probably) so I don't have to input everything every single time.
-
-DATE: Oct 1
-
-1323h
-Probably start with the GUI, then kinematics, then error.
-
-===============
-LIBRARY IMPORTS
-"""
-import tkinter as tk
-from tkinter import ttk
-import numpy as np
-import pandas as pd
-import matplotlib as mpl
-import matplotlib.pyplot as plt
-import matplotlib.backends.backend_tkagg as tkagg
-from scipy.integrate import odeint
-import turtle
-
-
-"""
-CONFIG
-"""
-pd.options.display.width = 0
-pd.set_option("display.max_columns", None)
-pd.set_option("display.max_rows", None)
-pd.set_option("display.width", None)
-pd.set_option("display.max_colwidth", None)
-
-"""
-GUI Initialization
-"""
-window = tk.Tk()
-window.title("PID Controller v1.a")
-frame = ttk.Frame(window, padding = 10)
-
-
-"""
-GLOBALS
-"""
-
-POS_START = tk.DoubleVar() # meters
-VEL_START =  tk.DoubleVar() # m/s
-ACCEL_START =  tk.DoubleVar() # m/s^2
-T_START =  tk.IntVar() # seconds
-T_END =  tk.IntVar() # seconds
-
-MASS =  tk.DoubleVar() # kilograms
-
-# PID parameters
-SET_POINT = tk.DoubleVar() # float(input("Set point of speed to maintain? "))
-P_K = tk.DoubleVar() # float(input("Proportional term? "))
-I_K = tk.DoubleVar() # float(input("Integral term? "))
-D_K = tk.DoubleVar() # float(input("Derivative term? "))
-SCALE_FACTOR = tk.DoubleVar() #float(input("Scaling factor for external disturbance? "))
-CONTROL_CONSTANT = tk.DoubleVar() # this is your k omega
-CONTROL_SIGN = True # this should be a checkbox
-throttle_f = 0.0 # initial force applied by throttle = 0
-
-
-
-
-"""
-Initialization Parameters
-"""
-# Kinematic parameters
-
-position_start_slider = ttk.Scale(
-    frame,
-    from_ = 10,
-    to = 100,
-    orient = "horizontal",
-    variable = POS_START)
-
-velocity_start_slider = ttk.Scale(
-    frame,
-    from_ = 37,
-    to = 100,
-    orient = "horizontal",
-    variable = VEL_START) 
-
-accel_start_slider = tk.Scale(
-    frame,
-    from_ = 16,
-    to = 100,
-    orient = "horizontal",
-    variable = ACCEL_START) 
-
-t_start_slider = tk.Scale(
-    frame,
-    from_ = 1,
-    to = 100,
-    orient = "horizontal",
-    variable = T_START) 
-
-t_end_slider = tk.Scale(
-    frame,
-    from_ = 53,
-    to = 100,
-    orient = "horizontal",
-    variable = T_END) 
-
-mass_slider = tk.Scale(
-    frame,
-    from_ = 2,
-    to = 100,
-    orient = "horizontal",
-    variable = MASS)
-
-scale_factor_slider = tk.Scale(
-    frame,
-    from_ = 2,
-    to = 100,
-    orient = "horizontal",
-    variable = SCALE_FACTOR)  
-
-initial_params = [POS_START.get(), VEL_START.get(), ACCEL_START.get(), MASS.get(), T_START.get(), T_END.get()]
-
-# PID parameters
-
-set_point_slider = tk.Scale(
-    frame,
-    from_ = 10,
-    to = 100,
-    orient = "horizontal",
-    variable = SET_POINT)
-
-p_k_slider = tk.Scale(
-    frame,
-    from_ = 37,
-    to = 100,
-    orient = "horizontal",
-    variable = P_K) 
-
-i_k_slider = tk.Scale(
-    frame,
-    from_ = 16,
-    to = 100,
-    orient = "horizontal",
-    variable = I_K) 
-
-d_k_slider = tk.Scale(
-    frame,
-    from_ = 1,
-    to = 100,
-    orient = "horizontal",
-    variable = D_K) 
-
-# Control constant
-control_constant_slider = tk.Scale(
-    frame,
-    from_ = 53,
-    to = 100,
-    orient = "horizontal",
-    variable = CONTROL_CONSTANT) 
-
-# This should be a checkbox that just flips
-control_sign = tk.Scale(
-    frame,
-    from_ = 2,
-    to = 100,
-    orient = "horizontal",
-    variable = MASS) 
-
-"""
-FUNCTION DEFINITIONS
-"""
-
-def noise_f(k):
-    whitenoise = np.random.normal(1,2)
-    scaled_noise = k * whitenoise
-    return scaled_noise
-
-def kinematics(df, t): # 
-    keys_list = ["time", "disturbance_f", "throttle_f", "total_f", "mass", "acceleration", "velocity", "position"]
-    
-    return(df)
-
-def error_func(df, set_point, time): # Think this needs to reference the whole dataframe history?
-    error = 1
-
-    p_e = P_K.get() * error
-    i_e = I_K.get() * error
-    d_e = D_K.get() * error
-    pid = p_e + i_e + d_e
-    
-    return pid
-
-def pid(df, parameter_list): # This should be able to reference the whole DataFrame's history
-    pid_list = [1, throttle_f]
-    keys_list = ["PID", "throttle force"]
-    output_df = pd.DataFrame(data = pid_list, index = keys_list)
-    return output_df
-
-def plot(x, y, **args):
-    # figure contains plot
-    fig = mpl.figure.Figure(figsize = (5, 2), dpi = 300)
-    x.hist()
-    
-    canvas = mpl.backends.backend_tkagg.FigureCanvasTkAgg(fig, master = window)  
-    canvas.draw()
-    canvas.get_tk_widget().pack()
-    toolbar = mpl.backends.backend_tkagg.NavigationToolbar2Tk(canvas, window)
-    toolbar.update()
-    canvas.get_tk_widget().pack()
-
-# columns = ["time","position","velocity", "velocity-error","acceleration", "disturbance force", "throttle", "total force"]
-
-def main(output_force): # This may turn into something that needs to be called at every time step.
-
-    for c in sorted(frame.children):
-        frame.children[c].pack()
-        
-    window.mainloop()
-    t_start = T_START.get()
-    t = t_start # Creates a time variable
-    t_end = T_END.get()
-    t_n_labels = ["time", "disturbance_f", "throttle_f", "PID", "total_f", "mass", "acceleration", "velocity", "position", "error_v"]
-    disturbance_f = noise_f(SCALE_FACTOR.get())
-    output_force = 0
-    total_f = disturbance_f + output_force
-    kinematic_initial_values = [t, disturbance_f, output_force, total_f, MASS.get(), ACCEL_START.get(), VEL_START.get(), POS_START.get()]
-    initialization_df = pd.DataFrame(kinematic_initial_values)
-    output_df = pd.DataFrame(data=t_n_labels)
-    timestep_list = [output_df, initialization_df]
-    output_df = pd.concat(timestep_list, axis = 1).T 
-    # Need to pay attention here, this is where the DataFrame is initialized for everything else to start doing calculus on it
-
-    print(output_df)
-    
-    # This loop calls the different elements of the control loop in order for each time step of the DataFrame.
-    for t in range(t_start, t_end):
-        disturbance_f = noise_f(SCALE_FACTOR.get())
-        total_f = output_force + disturbance_f
-        kine_df = kinematics(output_df, t)
-    
-        setpoint = SET_POINT.get()
-        epsilon_df = error_func(output_df, setpoint, t)
-    
-        pid_t = pid(epsilon_df, kinematic_initial_values) # Here is the value of the PID function before going to the output function.
-        throttle_f = pid_t * CONTROL_CONSTANT.get() # The logic in this block is commented out for the moment because I need to get the integrals working correctly.
-        print("Epsilon: ", epsilon_df, "PID Output: ", pid_t, "Throttle Force: ", throttle_f)
-        timestep_list.append(kine_df)
-        
-    final = pd.concat(timestep_list, axis=0).T
-#    final.set_index("time")
-#    plt.plot(final["time"], final["disturbance_f"])
-    window.mainloop()
-"""
-Main Function Call
-"""
-main(throttle_f)
\ No newline at end of file
Index: .idea/Math4157.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Math4157.iml b/.idea/Math4157.iml
new file mode 100644
--- /dev/null	
+++ b/.idea/Math4157.iml	
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/misc.xml	
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/modules.xml	
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/Math4157.iml" filepath="$PROJECT_DIR$/.idea/Math4157.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/inspectionProfiles/profiles_settings.xml	
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
diff --git a/pyonics/pid/__init__.py b/pyonics/pid/__init__.py
new file mode 100644
diff --git a/pyonics/pid/pid.py b/pyonics/pid/pid.py
new file mode 100644
